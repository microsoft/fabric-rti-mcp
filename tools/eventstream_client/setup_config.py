"""
Integrated from external MCP server: fabric_eventstream_mcp\setup_config.py
Adapted for fabric-rti-mcp
"""

#!/usr/bin/env python3
"""
Interactive configuration setup script for Fabric Eventstream MCP Server
"""
import os
import sys

def get_user_input(prompt, default="", required=True):
    """Get user input with optional default value."""
    if default:
        full_prompt = f"{prompt} [{default}]: "
    else:
        full_prompt = f"{prompt}: "
    
    value = input(full_prompt).strip()
    
    if not value and default:
        return default
    
    if required and not value:
        print("‚ùå This field is required. Please enter a value.")
        return get_user_input(prompt, default, required)
    
    return value

def main():
    """Interactive configuration setup."""
    print("üîß Fabric Eventstream MCP Server - Configuration Setup")
    print("=" * 60)
    print("This script will help you create a config_local.py file with your settings.")
    print("All values will be stored locally and NOT committed to git.")
    print()
    
    # Check if config_local.py already exists
    if os.path.exists("config_local.py"):
        response = input("‚ö†Ô∏è  config_local.py already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    print("üìã Please provide the following information:")
    print()
    
    # Azure OpenAI Configuration
    print("üîµ Azure OpenAI Configuration:")
    endpoint = get_user_input(
        "Azure OpenAI Endpoint (e.g., https://your-resource.openai.azure.com/)"
    )
    
    api_key = get_user_input(
        "Azure OpenAI API Key"
    )
    
    deployment = get_user_input(
        "Deployment Name (e.g., gpt-4, gpt-35-turbo)",
        default="gpt-4"
    )
    
    api_version = get_user_input(
        "API Version",
        default="2024-02-15-preview"
    )
    
    print()
    
    # Microsoft Fabric Configuration
    print("üü† Microsoft Fabric Configuration:")
    workspace_id = get_user_input(
        "Default Workspace ID (UUID format)",
        required=False
    )
    
    print()
    
    # MCP Server Configuration
    print("üü¢ MCP Server Configuration:")
    mcp_url = get_user_input(
        "MCP Server URL",
        default="http://localhost:8000"
    )
    
    # Generate the configuration file
    config_content = f'''"""
Local configuration file - DO NOT COMMIT TO GIT
Generated by setup script
"""

LOCAL_CONFIG = {{
    # Azure OpenAI Configuration
    "AZURE_OPENAI_ENDPOINT": "{endpoint}",
    "AZURE_OPENAI_API_KEY": "{api_key}",
    "AZURE_OPENAI_DEPLOYMENT": "{deployment}",
    "AZURE_OPENAI_API_VERSION": "{api_version}",
    
    # Microsoft Fabric Configuration  
    "FABRIC_WORKSPACE_ID": "{workspace_id}",
    
    # MCP Server Configuration
    "MCP_SERVER_URL": "{mcp_url}",
}}'''
    
    # Write the configuration file
    try:
        with open("config_local.py", "w") as f:
            f.write(config_content)
        
        print()
        print("‚úÖ Configuration file created successfully!")
        print("üìÅ File: config_local.py")
        print()
        print("üéØ Next Steps:")
        print("1. Start the MCP server: uvicorn main:app --reload")
        print("2. Test the configuration: python example_usage.py")
        print("3. Run the interactive agent: python ai_agent_openai.py")
        print()
        print("üîí Security Note:")
        print("- config_local.py contains sensitive API keys")
        print("- This file is automatically ignored by git")
        print("- Keep your API keys secure and never share them")
        
    except Exception as e:
        print(f"‚ùå Error creating configuration file: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
